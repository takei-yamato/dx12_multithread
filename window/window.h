#pragma once

#include "utility/singleton.h"

namespace window {

	//---------------------------------------------------------------------------------
	/**
	 * @brief	ウィンドウの横幅を取得する
	 */
	uint32_t width() noexcept;

	//---------------------------------------------------------------------------------
	/**
	 * @brief	ウィンドウの縦幅を取得する
	 */
	uint32_t Height() noexcept;

	//---------------------------------------------------------------------------------
	/**
	 * @brief
	 * ウィンドウ制御クラス
	 *
	 * シングルトンによるウィンドウ制御クラス
	 */
	class Window : public utility::Singleton<Window> {
	private:
		friend class utility::Singleton<Window>;
	public:
		//---------------------------------------------------------------------------------
		/**
		 * @brief	デストラクタ
		 */
		~Window();

		//---------------------------------------------------------------------------------
		/**
		 * @brief	ウィンドウプロシージャ
		 */
		LRESULT		msgProc(HWND handle, UINT msg, WPARAM wParam, LPARAM lParam);

		//---------------------------------------------------------------------------------
		/**
		 * @brief	ウィンドウスレッドの生成
		 * @param	instance	インスタンスハンドル
		 * @return	生成の成否
		 */
		HRESULT		create(HINSTANCE instance) noexcept;

		//---------------------------------------------------------------------------------
		/**
		 * @brief	スレッドワーカー
		 * @param	instance	インスタンスハンドルのポインタ
		 */
		void		worker(HINSTANCE* instance) noexcept;

		//---------------------------------------------------------------------------------
		/**
		 * @brief	ウィンドウ生成終了までの処理待機
		 */
		void		wait() noexcept;

		//---------------------------------------------------------------------------------
		/**
		 * @brief	ウィンドウハンドルの取得
		 * @return	ウィンドウハンドル
		 */
		const HWND& handle() const noexcept;

		//---------------------------------------------------------------------------------
		/**
		 * @brief	ウィンドウが終了しているか否かの取得
		 * @return	終了していればtrue
		 */
		bool		isEnd() const noexcept;

	private:
		//---------------------------------------------------------------------------------
		/**
		 * @brief	コンストラクタ
		 */
		Window();

	private:
		class Impl;
		std::unique_ptr<Impl> impl_;	///< インプリメントクラスポインタ

	};
}
